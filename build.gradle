plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    // id 'com.wynprice.cursemaven' version '2.1.1'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

group = project.maven_group
version = "${project.minecraft_version}-${project.mod_version}"
base {
	archivesName = project.archives_base_name
}

println('Java: ' + System.getProperty('java.version'))
println('JVM:  ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')')
println('Arch: ' + System.getProperty('os.arch'))

println("System Proxies: ${System.getProperty('java.net.useSystemProxies')}")
println("Proxy HTTP: ${System.getProperty('http.proxyHost')}:${System.getProperty('http.proxyPort')}")
println("Proxy HTTPS: ${System.getProperty('https.proxyHost')}:${System.getProperty('https.proxyPort')}")

minecraft {
    // Channel:   Version:
    // official   MCVersion  Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    mappings channel: project.mappings_channel, version: project.mappings_version

    // Have all Eclipse/IntelliJ IDEA run configurations run the "prepareXXX" task before launching the game.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // Allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // makeObfSourceJar = false

    runs {
        configureEach {
            workingDirectory project.file('run')

            // log4j2 bug fix
            property 'log4j2.formatMsgNoLookups', 'true'

            property 'net.minecraftforge.gradle.check.certs', 'false'

            // Recommended logging data for a userdev environment
            // Added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            // https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // mixin
            // property 'mixin.env.disableRefMap', 'true'

            mods {
                "${project.mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run/client')
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.enabledGameTestNamespaces', "${project.mod_id}"
            args '-nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run/gametest')
            property 'forge.enabledGameTestNamespaces', "${project.mod_id}"
        }

        data {
            workingDirectory project.file('run/data')
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources/' }

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenLocal()
    maven {
        // mixin
        name 'spongepowered'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'Curse Maven'
        url 'https://www.cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name 'Jared\'s maven'
        url 'https://maven.blamejared.com/mezz/jei/'
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name 'ModMaven'
        url 'https://modmaven.k-4u.nl'
    }
    maven {
        name 'CurseForge'
        url 'https://minecraft.curseforge.com/api/maven/'
    }
    mavenCentral()
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${forge_version}"

    // Mod dependency from ./libs with a flat dir repository
    // groupId: blank
    // Example:
    // ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
    compileOnly fg.deobf(fileTree(dir: 'libs', include: ['*.jar'], excludes: ['*-sources.jar', '*-local.jar']))

    // mixin
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"
    testAnnotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"

    compileOnly fg.deobf("mezz.jei:${jei_artifact_id}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:${jei_artifact_id}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:${jei_artifact_id}-forge:${jei_version}")

    runtimeOnly fg.deobf("curse.maven:JustEnoughCharacters-250702:${jech_version}")
    runtimeOnly fg.deobf("curse.maven:Jade-324717:${jade_version}")
    runtimeOnly fg.deobf("curse.maven:XaeroMinimap-263420:${xaerominimap_version}")
    runtimeOnly fg.deobf("curse.maven:XaeroWorldmap-317780:${xaeroworldmap_version}")
}

mixin {
    add sourceSets.main, "mixins.${project.mod_id}.refmap.json"
    config "mixins.${project.mod_id}.json"

    debug.verbose = true
    debug.export = true
    dumpTargetOnFailure = true
    checks = true
    hotSwap = true
}

// A missing property will result in an error.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
            'loaderVersion': project.fml_request,
            'license': project.mod_license,
            'modId': project.mod_id,
            'modVersion': version,
            'modName': project.mod_name,
            'authors': project.author_name,
            'modDescription': project.mod_description,
            'fmlRequest': project.fml_request,
            'mcRequest': project.minecraft_request,
            'resourcepackDescription': project.mod_resourcepack_description,
            'resourcePackFormat': project.mod_resourcepack_format,
            'dataPackFormat': project.mod_datapack_format
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
    options.encoding = 'UTF-8'
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            "Specification-Title": project.mod_id,
            "Specification-Vendor": author_name,
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor" : author_name,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "mixins.${project.mod_id}.json"
        ])
    }

    // Preferred method to reobfuscate the jar file
    jar.finalizedBy('reobfJar')
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
